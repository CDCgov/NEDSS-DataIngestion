plugins {
  id 'java'
  id 'org.springframework.boot' version '3.5.3'
  id 'io.spring.dependency-management' version '1.1.6'
}

group = 'gov.cdc.nbs'
version = '0.0.1-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

repositories {
  mavenCentral()
}

dependencies {
  // spring
  implementation 'org.springframework.boot:spring-boot-starter-batch'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.apache.httpcomponents.client5:httpclient5'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'

  // security
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.security:spring-security-config:6.5.1'
  implementation 'org.springframework.security:spring-security-web:6.5.1'
  implementation 'org.springframework.security:spring-security-oauth2-resource-server:6.5.1'
  implementation 'org.springframework.security:spring-security-oauth2-jose:6.5.1'
  implementation 'com.auth0:java-jwt:4.5.0'

  // pdf creation
  implementation 'com.github.librepdf:openpdf:1.3.30'


  // database
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
  runtimeOnly 'org.postgresql:postgresql'

  // swagger
  implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'

   //kafka
  implementation 'org.springframework.kafka:spring-kafka'

  // lombok
  compileOnly 'org.projectlombok:lombok:1.18.34'
  annotationProcessor 'org.projectlombok:lombok:1.18.34'

  // testing
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.batch:spring-batch-test'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  // test containers
  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'org.testcontainers:mssqlserver'
  testImplementation 'org.testcontainers:postgresql'
}

bootRun {
    systemProperty('spring.profiles.active', 'default,local,dev')

     debugOptions {
        enabled = true
        server = true
        suspend = false
        port = 19042
    }
}

tasks.named('test') {
  useJUnitPlatform()
}

test {
    if (System.getProperty("testing.database.mssql.image") != null) {
        systemProperty "testing.database.mssql.image", System.getProperty("testing.database.mssql.image")
    }
}
