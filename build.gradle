buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("com.dipien:semantic-version-gradle-plugin:2.0.0")
        classpath 'org.owasp:dependency-check-gradle:9.0.3'
    }
}

plugins {
    id "org.sonarqube" version "4.2.1.3168"
}

apply plugin: 'org.owasp.dependencycheck'

version = '7.11.1-SNAPSHOT-0002'  // The plugin will assign the root project version to all its subprojects.
apply plugin: "com.dipien.semantic-version"
subprojects {

    repositories {
        mavenCentral()
        maven {
            url "https://packages.confluent.io/maven"
        }
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'

    // Displays cucumber test results
    apply from: "${rootDir}/gradle/cucumber-logging.gradle"

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
        }
    }

    tasks.named('test') {
        finalizedBy tasks.named('jacocoTestReport', JacocoReport)
    }

}


sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectKey", "CDCgov_NEDSS-DataIngestion"
        property "sonar.organization", "cdcgov"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "${rootDir}/hl7-parser/build/reports/jacoco/test/jacocoTestReport.xml,${rootDir}/coverage-report/build/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml,${rootDir}/data-ingestion-service/build/customJacocoReportDir/test/jacocoTestReport.xml,${rootDir}/data-processing-service/build/customJacocoReportDir/test/jacocoTestReport.xml"
    }
}

/**
 * Loads environment variables from a .env file and applies them 
 * to all JavaExec and Test tasks in subprojects.
 */
def setupEnvironmentVariables() {
    // Create a global map to store environment variables
    project.ext.environment = [:]

    def envFile = file(".env")
    if (envFile.exists()) {
        println "Loading environment variables from ${envFile.absolutePath}"
        
        envFile.eachLine { line ->
            def trimmedLine = line.trim()
            if (trimmedLine && !trimmedLine.startsWith("#")) {
                def parts = trimmedLine.split("=", 2)
                if (parts.size() == 2) {
                    project.ext.environment.put(parts[0].trim(), parts[1].trim())
                }
            }
        }

        // Define the configuration closure *once* outside the task configuration.
        // NOTE: It must access variables via the global 'rootProject.ext.environment'
        // to work reliably across subprojects.
        def configureTaskWithEnv = { task ->
            def vars = rootProject.ext.environment
            // Ensure we are only configuring the task if the map has data
            if (!vars.isEmpty()) {
                task.environment.putAll(vars)
            }
        }
        
        // Apply the configuration closure to all subprojects
        subprojects {
            tasks.withType(JavaExec).configureEach { configureTaskWithEnv(it) }
            tasks.withType(Test).configureEach{ configureTaskWithEnv(it) }
        }
    }
}

setupEnvironmentVariables()
