buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
        classpath 'org.owasp:dependency-check-gradle:9.0.3'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'jacoco'
    id "org.sonarqube" version "4.2.1.3168"
}

apply plugin: 'org.owasp.dependencycheck'

group = 'gov.cdc.dataprocessing'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
}
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

tasks.withType(Jar).all { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }

if ( isReleaseVersion ) {
    println "Using staging URL"
    ext.mavenCentralUploadUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
    println "Using snapshot URL"
    ext.mavenCentralUploadUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
}

configurations {
    jaxb
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    getExecutionData().setFrom(fileTree(buildDir).include("**/jacoco/*.exec"))

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    excludes: [
                            '**/config/**',
                            '**/constant/**',
                            '**/model/dsma_algorithm/**',
                            '**/model/phdc/**',
                            '**/repository/nbs/msgoute/model/**',
                            '**/repository/nbs/odse/model/**',
                            '**/repository/nbs/srte/model/**',
                            '**/security/config/**',
                            '**/ServiceApplication.java',
                            '**/DsmLabMatchHelper.java',
                            '**/DynamicBeanBinding.java',
                            '**/RulesEngineUtil.java',
                            '**/utilities/model/**',
                            '**/controller/**',
                            '**/WdsObjectChecker.java',
                            '**/AdvancedCriteria.java',
                            '**/cache/OdseCache.java',
                            '**/cache/PropertyUtilCache.java',
                            '**/cache/SrteCache.java',
                            '**/StringUtils.java',
                            '**/TimeStampUtil.java',
                            '**/AuthUtil.java',
                            '**/ObsReqNoteHelper.java',
                            '**/WdsObjectChecker.java',
                            '**/InvestigationService.java',
                            '**/ObservationRequestHandler.java',
                            '**/InvestigationNotificationService.java',
                            '**/ObservationMatchingService.java',
                            '**/ContactSummaryService.java',
                            '**/RetrieveSummaryService.java',
                            '**/ManagerCacheService.java'
                    ]
            )
        }))
    }
}


task integration(type: Test) {
    useJUnitPlatform()
}

task jaxb {
    System.setProperty('javax.xml.accessExternalSchema', 'all')
    def jaxbTargetDir = file("src/main/java")
    doLast {
        jaxbTargetDir.mkdirs()
        ant.taskdef(
                name: 'xjc',
                classname: 'com.sun.tools.xjc.XJCTask',
                classpath: configurations.jaxb.asPath
        )
        ant.jaxbTargetDir = jaxbTargetDir
        ant.xjc(
                destdir: '${jaxbTargetDir}',
                package: 'gov.cdc.dataprocessing.model.phdc',
                schema: 'src/main/resources/xsd/PHDC.xsd'
        )
    }
}
compileJava.dependsOn jaxb

task jaxbDsma {
    System.setProperty('javax.xml.accessExternalSchema', 'all')
    def jaxbTargetDir = file("src/main/java")
    doLast {
        jaxbTargetDir.mkdirs()
        ant.taskdef(
                name: 'xjc',
                classname: 'com.sun.tools.xjc.XJCTask',
                classpath: configurations.jaxb.asPath
        )
        ant.jaxbTargetDir = jaxbTargetDir
        ant.xjc(
                destdir: '${jaxbTargetDir}',
                package: 'gov.cdc.dataprocessing.model.dsma_algorithm',
                schema: 'src/main/resources/xsd/DSMAlgorithm.xsd'
        )
    }
}
compileJava.dependsOn jaxbDsma


jar {
    manifest {
        attributes(
                'Main-Class': 'gov.cdc.dataprocessing.ServiceApplication'
        )
    }
    zip64 true
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server:3.2.0'
    implementation 'org.springframework.kafka:spring-kafka:3.0.12'
    implementation 'org.apache.kafka:kafka-clients:3.6.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.microsoft.sqlserver:mssql-jdbc:12.2.0.jre11'
    implementation 'com.zaxxer:HikariCP:5.0.1'

    implementation 'ca.uhn.hapi:hapi-base:2.3'
    implementation 'ca.uhn.hapi:hapi-structures-v251:2.3'
    implementation 'ca.uhn.hapi:hapi-structures-v231:2.3'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.slf4j:slf4j-api'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.2.0'
    implementation 'org.simpleframework:simple-xml:2.7.1'

    implementation 'io.prometheus:simpleclient:0.16.0'
    implementation 'io.prometheus:simpleclient_hotspot:0.16.0'
    implementation 'io.prometheus:simpleclient_httpserver:0.16.0'
    implementation 'io.prometheus:simpleclient_pushgateway:0.16.0'

    implementation 'org.hibernate.validator:hibernate-validator'

    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    // Below is needed for runtime with jaxb generated code
    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.2'
    // Only need below two dependencies for java code generation from xsd file(s)
    jaxb 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    jaxb 'org.glassfish.jaxb:jaxb-xjc:4.0.2'


    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation(platform('org.junit:junit-bom:5.9.1'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation 'org.springframework.kafka:spring-kafka-test:3.1.0'
    testImplementation(platform('org.junit:junit-bom:5.9.1'))
    testImplementation('org.junit.jupiter:junit-jupiter:5.9.2')
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.0'
    testImplementation 'org.springframework.security:spring-security-test:6.2.0'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools:3.2.0'

    implementation 'org.apache.commons:commons-lang3:3.14.0'


}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
                'Main-Class': 'gov.cdc.dataprocessing.ServiceApplication'
        )
    }
    zip64 true
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Gather all runtime dependencies
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }

}

sonarqube {
    properties {
        property "sonar.projectKey", "CDCgov_NEDSS-DataIngestion"
        property "sonar.organization", "cdcgov"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.exclusions", [
                "**/config/**",
                "**/controller/**",
                "**/constant/**",
                "**/model/dsma_algorithm/**",
                "**/model/phdc/**",
                "**/repository/nbs/msgoute/model/**",
                "**/repository/nbs/odse/model/**",
                "**/repository/nbs/srte/model/**",
                "**/security/config/**",
                "**/ServiceApplication.java",
                "**/DsmLabMatchHelper.java",
                "**/DynamicBeanBinding.java",
                "**/RulesEngineUtil.java",
                "**/utilities/model/**",
                "**/WdsObjectChecker.java",
                "**/AdvancedCriteria.java",
                "**/cache/OdseCache.java",
                "**/cache/PropertyUtilCache.java",
                "**/cache/SrteCache.java",
                "**/StringUtils.java",
                "**/TimeStampUtil.java",
                "**/AuthUtil.java",
                "**/ObsReqNoteHelper.java",
                "**/InvestigationService.java",
                "**/ObservationRequestHandler.java",
                "**/InvestigationNotificationService.java",
                "**/ObservationMatchingService.java",
                "**/ContactSummaryService.java",
                "**/RetrieveSummaryService.java",
                "**/ManagerCacheService.java"
        ].join(",")
    }
}
