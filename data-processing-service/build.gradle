buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
        classpath 'org.owasp:dependency-check-gradle:9.0.3'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'jacoco'
    id "org.sonarqube" version "4.2.1.3168"
}

apply plugin: 'org.owasp.dependencycheck'

group = 'gov.cdc.dataprocessing'
version = '0.0.1-SNAPSHOT'

springBoot {
    buildInfo()
}


java {
    sourceCompatibility = JavaVersion.VERSION_21
}
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

tasks.withType(Jar).all { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }

if ( isReleaseVersion ) {
    println "Using staging URL"
    ext.mavenCentralUploadUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
    println "Using snapshot URL"
    ext.mavenCentralUploadUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
}

configurations {
    jaxb
    compileOnly {
        extendsFrom annotationProcessor
    }
}


bootRun {
  systemProperty('spring.profiles.active', 'default,local')

    debugOptions {
        enabled = true
        server = true
        suspend = false
        port = java.util.Optional.ofNullable(findProperty('debug.port'))
                .map(Object::toString)
                .map(Integer::parseInt)
                .orElse(19041)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.12"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    jacoco {
        // Exclude problematic classes (e.g., JDK internal tools)
        excludes = ["com/sun/tools/attach/**"]
    }
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
}

task integration(type: Test) {
    useJUnitPlatform()
}

task jaxb {
    System.setProperty('javax.xml.accessExternalSchema', 'all')
    def jaxbTargetDir = file("src/main/java")
    doLast {
        jaxbTargetDir.mkdirs()
        ant.taskdef(
                name: 'xjc',
                classname: 'com.sun.tools.xjc.XJCTask',
                classpath: configurations.jaxb.asPath
        )
        ant.jaxbTargetDir = jaxbTargetDir
        ant.xjc(
                destdir: '${jaxbTargetDir}',
                package: 'gov.cdc.dataprocessing.model.phdc',
                schema: 'src/main/resources/xsd/PHDC.xsd'
        )
    }
}
compileJava.dependsOn jaxb

task jaxbDsma {
    System.setProperty('javax.xml.accessExternalSchema', 'all')
    def jaxbTargetDir = file("src/main/java")
    doLast {
        jaxbTargetDir.mkdirs()
        ant.taskdef(
                name: 'xjc',
                classname: 'com.sun.tools.xjc.XJCTask',
                classpath: configurations.jaxb.asPath
        )
        ant.jaxbTargetDir = jaxbTargetDir
        ant.xjc(
                destdir: '${jaxbTargetDir}',
                package: 'gov.cdc.dataprocessing.model.dsma_algorithm',
                schema: 'src/main/resources/xsd/DSMAlgorithm.xsd'
        )
    }
}
compileJava.dependsOn jaxbDsma


jar {
    manifest {
        attributes(
                'Main-Class': 'gov.cdc.dataprocessing.ServiceApplication'
        )
    }
    zip64 true
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

dependencies {
    // Spring boot
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'

    // Cache implementation    
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // Kafka    
    implementation 'org.springframework.kafka:spring-kafka:3.3.1'
    implementation 'org.apache.kafka:kafka-clients:3.9.0'

    // Swagger - openapi
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

    // Database
    implementation 'com.microsoft.sqlserver:mssql-jdbc:12.2.0.jre11'

    // Hapi HL7
    implementation 'ca.uhn.hapi:hapi-base:2.3'
    implementation 'ca.uhn.hapi:hapi-structures-v251:2.3'
    implementation 'ca.uhn.hapi:hapi-structures-v231:2.3'

    // Logging    
    implementation 'org.slf4j:slf4j-api'
    implementation 'io.prometheus:simpleclient:0.16.0'
    implementation 'io.prometheus:simpleclient_hotspot:0.16.0'
    implementation 'io.prometheus:simpleclient_httpserver:0.16.0'
    implementation 'io.prometheus:simpleclient_pushgateway:0.16.0'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    
    // Code generation from xsd files
    jaxb 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    jaxb 'org.glassfish.jaxb:jaxb-xjc:4.0.2'
    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.2'

    // Lombok annotations
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Misc
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.18.2'
    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    implementation 'org.apache.commons:commons-lang3:3.14.0'


    // Testing    
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation 'org.springframework.kafka:spring-kafka-test:3.1.0'
    testImplementation('org.junit.jupiter:junit-jupiter:5.9.2')
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation(platform('org.junit:junit-bom:5.10.0'))
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
                'Main-Class': 'gov.cdc.dataprocessing.ServiceApplication'
        )
    }
    zip64 true
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Gather all runtime dependencies
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }

}

sonarqube {
    properties {
        property "sonar.projectKey", "CDCgov_NEDSS-DataIngestion"
        property "sonar.organization", "cdcgov"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.exclusions", "**/config/**, **/constant/**, **/exception/**, **/model/container/**, **/model/dsma_algorithm/**, **/model/dto/**, **/model/phdc/**, " +
                " **/repository/nbs/msgoute/model/**, **/repository/nbs/odse/model/**, **/repository/nbs/srte/model/**, **/security/config/**, **/ServiceApplication.java, " +
                " **/service/model/**, **/DynamicBeanBinding.java, **/RulesEngineUtil.java, **/utilities/model/**," +
                " **/controller/**, **/kafka/consumer/**, **kafka/producer/**, **/WdsObjectChecker.java," +
                " **/AdvancedCriteria.java, **/cache/OdseCache.java, **/cache/PropertyUtilCache.java, " +
                " **/cache/SrteCache.java, **/StringUtils.java, **/TimeStampUtil.java, **/AuthUtil.java"
    }
}