
buildscript {
	repositories {
		mavenCentral()
		gradlePluginPortal()
	}
	dependencies {
		classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'gov.cdc.dataingestion'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

tasks.withType(Jar).all { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }

configurations {
	jaxb
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jar {
	manifest {
		attributes(
				'Main-Class': 'gov.cdc.dataingestion.ServiceApplication'
		)
	}
}

task jaxb {
	System.setProperty('javax.xml.accessExternalSchema', 'all')
	def jaxbTargetDir = file("src/main/java")
	doLast {
		jaxbTargetDir.mkdirs()
		ant.taskdef(
				name: 'xjc',
				classname: 'com.sun.tools.xjc.XJCTask',
				classpath: configurations.jaxb.asPath
		)
		ant.jaxbTargetDir = jaxbTargetDir
		ant.xjc(
				destdir: '${jaxbTargetDir}',
				package: 'gov.cdc.dataingestion.nbs.jaxb',
				schema: 'src/main/resources/xsd/PHDC.xsd'
		)
	}
}

compileJava.dependsOn jaxb

dependencies {
	implementation files('../hl7-parser/build/libs/hl7-parser.jar')

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'ca.uhn.hapi.fhir:hapi-fhir-structures-r4:6.1.3'
	implementation 'ca.uhn.hapi:hapi-base:2.3'
	implementation 'ca.uhn.hapi:hapi-structures-v251:2.3'
	implementation 'io.github.linuxforhealth:hl7v2-fhir-converter:1.0.19'
	implementation 'com.google.code.gson:gson:2.10.1'
	implementation 'com.opencsv:opencsv:5.7.1'
	implementation 'com.microsoft.sqlserver:mssql-jdbc:12.2.0.jre11'
	implementation 'com.zaxxer:HikariCP:5.0.1'

	implementation 'ca.uhn.hapi:hapi-base:2.3'
	implementation 'ca.uhn.hapi:hapi-structures-v251:2.3'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation(platform('org.junit:junit-bom:5.9.1'))
	testImplementation('org.junit.jupiter:junit-jupiter')
	testImplementation 'org.testcontainers:testcontainers:1.17.3'
	testImplementation 'org.springframework.kafka:spring-kafka-test:3.0.5'

	testImplementation(platform('org.junit:junit-bom:5.9.1'))
	testImplementation('org.junit.jupiter:junit-jupiter:5.9.2')
	testImplementation 'org.testcontainers:testcontainers:1.17.3'
	testImplementation "org.testcontainers:mssqlserver:1.17.6"
	testImplementation "org.testcontainers:junit-jupiter:1.17.6"
	testImplementation 'org.testcontainers:postgresql:1.17.6'

	runtimeOnly 'org.springframework.boot:spring-boot-devtools'

	// Below is needed to compile jaxb generated code
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'

	// Below is needed for runtime with jaxb generated code
	runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.2'

	// Only need below two dependencies for java code generation from xsd file(s)
	jaxb 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
	jaxb 'org.glassfish.jaxb:jaxb-xjc:4.0.2'
}

test {
	useJUnitPlatform()
}


