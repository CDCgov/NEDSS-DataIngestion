server:
  port: 8081
  servlet:
    context-path: /ingestion
  tomcat:
    max-http-form-post-size:  ${API_PAYLOAD_MAX_SIZE:100MB}
    max-swallow-size: ${API_PAYLOAD_MAX_SIZE:100MB}

info:
  app:
    name: DI
    version: 1.0.0
    description: Data Ingestion

management:
  info:
    build:
      enabled: true
    java:
      enabled: true
  endpoint:
    prometheus:
      enabled: true
    health:
      show-details: always
      roles: ADMIN
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: "health,info"
  prometheus:
    metrics:
      export:
        enabled: true

spring:
  application:
    name: data-ingestion-service
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${DI_AUTH_URI}
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

auth:
  token-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/token
  introspect-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/token/introspect

ecr:
  processing:
    batchSize: 100 # How many records are processed at a time
    interval: 3000 # How often (in milliseconds) the database is queried for records to process

dlt:
  scheduler:
    enabled: ${SCHEDULER_ENABLED:false}
    cron: ${SCHEDULER_CRON:0/30 * * * * *}

---
spring:
  config:
    activate:
      on-profile: default
  liquibase:
    user: ${NBS_DBUSER}
    password: ${NBS_DBPASSWORD}
    driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver
    dataingest:
      change-log: classpath:db/changelog/dataingest-changelog.yaml
      url: jdbc:sqlserver://${NBS_DBSERVER};databaseName=NBS_DATAINGEST;encrypt=true;trustServerCertificate=true;
    msgoute:
      change-log: classpath:db/changelog/msgoute-changelog.yaml
      url: jdbc:sqlserver://${NBS_DBSERVER};databaseName=NBS_MSGOUTE;encrypt=true;trustServerCertificate=true;
  datasource:
    username: ${NBS_DBUSER}
    password: ${NBS_DBPASSWORD}
    driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver
    hikari:
      maximum-pool-size: ${HIKARI_POOL_SIZE:40}
      connection-timeout: ${HIKARI_CON_TIMEOUT:300000}
      minimum-idle: ${HIKARI_MINIMUM_IDLE:20}
      idle-timeout: ${HIKARI_IDLE_TIMEOUT:120000}
      max-lifetime: ${HIKARI_MAX_LIFETIME:1200000}
      pool-name: ${HIKARI_POOL_NAME:SQLServerHikariCP}
      leak-detection-threshold: ${LEAK_DETECTION_THRESHOLD:300000}
    dataingest:
      url: jdbc:sqlserver://${NBS_DBSERVER};databaseName=NBS_DATAINGEST;encrypt=true;trustServerCertificate=true;
    msgoute:
      url: jdbc:sqlserver://${NBS_DBSERVER};databaseName=NBS_MSGOUTE;encrypt=true;trustServerCertificate=true;
    odse:
      url: jdbc:sqlserver://${NBS_DBSERVER};databaseName=NBS_ODSE;encrypt=true;trustServerCertificate=true;
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVERS:localhost:9092}
    thread: ${KAFKA_CONCURRENCY:1}
    group-id-default: data-ingestion-group
    group-id-raw: data-ingestion-group-raw
    group-id-raw-xml: data-ingestion-group-raw-xml
    group-id-validate: data-ingestion-group-validate
    group-id-xml: data-ingestion-group-xml
    group-id-ecr-cda: data-ingestion-group-ecr-cda
    group-id-dlt-manual: data-ingestion-group-dlt-manual
    consumer:
      maxPollIntervalMs: 300000

kafka:
  consumer:
    max-retry: 2
  raw:
    producer:
      topic: elr_raw
    topic: elr_raw
    xml-topic: elr_raw_xml
  validation:
    topic: elr_validated
  fhir-conversion:
    topic: fhir_converted
  fhir-conversion-prep:
    topic: fhir_prep
  xml-conversion:
    topic: xml_converted
  xml-conversion-prep:
    topic: xml_prep
  elr-duplicate:
    topic: elr_duplicate
  rti:
    topic: dp_elr_unprocessed
  topics: elr_raw,elr_validated
  retry:
    suffix: _retry
  dlt:
    suffix: _dlt

security:
  protocol: SASL_SSL
sasl:
  mechanism: AWS_MSK_IAM
  jaas:
    config: software.amazon.msk.auth.iam.IAMLoginModule required;
  client:
    callback.handler.class: software.amazon.msk.auth.iam.IAMClientCallbackHandler
---
sftp:
  enabled: ${DI_SFTP_ENABLED:disabled}
  host: ${DI_SFTP_HOST:dummyhost}
  username: ${DI_SFTP_USER:dummyuser}
  password: ${DI_SFTP_PWD:dummypwd}
  elr-file-extns: ${DI_SFTP_ELR_FILE_EXTNS:txt,hl7}
  phcr-importer-version: ${DI_PHCR_IMPORTER_VERSION:1}
  filepaths: ${DI_SFTP_FILEPATHS:/}

diserver:
  host: ${DI_SERVER_HOST:localhost:8081}


service:
  timezone: ${SERVICE_TZ:UTC}