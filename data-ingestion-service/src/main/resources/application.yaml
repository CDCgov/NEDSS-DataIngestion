server:
  port: 8081

management:
  endpoint:
    prometheus:
      enabled: true
  endpoints:
    web:
      exposure:
        include: '*'
  prometheus:
    metrics:
      export:
        enabled: true

rsa:
  private-key-content: ${DI_RSA_PRIVATE_KEY}
  public-key-content: ${DI_RSA_PUBLIC_KEY}
spring:
  application:
    name: data-ingestion-service
logging:
  #  Only one config can be active at a time
  config: classpath:logback-config.xml
LOG_PATH: ${DI_LOG_PATH}
notification-config:
  email:
    aws: true
    azure: false
  chat:
    slack: false
---
spring:
  config:
    activate:
      on-profile: default
  datasource:
    url: jdbc:sqlserver://${DI_DBSERVER};databaseName=${DI_DBNAME};encrypt=true;trustServerCertificate=true;
    username: ${DI_USERNAME}
    password: ${DI_PASSWORD}
    driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver
    hikari:
      connection-timeout: 60000
      maximum-pool-size: 5
    nbs:
      url: jdbc:sqlserver://${DI_NBS_DBSERVER};databaseName=${DI_NBS_DBNAME};encrypt=true;trustServerCertificate=true;
      username: ${DI_NBS_DBUSER}
      password: ${DI_NBS_DBPASSWORD}
      driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVERS}
    group-id: data-ingestion-group
    consumer:
      maxPollIntervalMs: 30000
aws:
  authentication:
    access: ${AWS_ACCESS_KEY}
    secret: ${AWS_SECRET}
    token: ${AWS_TOKEN}
    region: ${AWS_REGION}
  ses:
    email:
      source: ${AWS_SES_SOURCE}
      recipients: ${AWS_SES_RECIPIENTS}
kafka:
  consumer:
    max-retry: 2
  raw:
    producer:
      topic: elr_raw
    topic: elr_raw
  validation:
    topic: elr_validated
  fhir-conversion:
    topic: fhir_converted
  fhir-conversion-prep:
    topic: fhir_prep
  xml-conversion:
    topic: xml_converted
  xml-conversion-prep:
    topic: xml_prep
  elr-duplicate:
    topic: elr_duplicate
  dlt-alarm-notification:
    topic: dlt_alarm_notification
  dlt-alarm-notification-email-aws:
    topic: dlt_alarm_notification_email_aws
  topics: elr_raw,elr_validated
  retry:
      suffix: _retry
  dlt:
      suffix: _dlt

---
spring:
  config:
    activate:
      on-profile: kubernetes
  datasource:
    url: jdbc:sqlserver://${DI_DBSERVER};databaseName=${DI_DBNAME};encrypt=true;trustServerCertificate=true;
    username: ${DI_USERNAME}
    password: ${DI_PASSWORD}
    driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver
    hikari:
      connection-timeout: 60000
      maximum-pool-size: 5
    nbs:
      url: jdbc:sqlserver://${DI_NBS_DBSERVER};databaseName=${DI_NBS_DBNAME};encrypt=true;trustServerCertificate=true;
      username: ${DI_NBS_DBUSER}
      password: ${DI_NBS_DBPASSWORD}
      driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVERS}
    group-id: data-ingestion-group
    consumer:
      maxPollIntervalMs: 30000
aws:
  authentication:
    access: ${AWS_ACCESS_KEY}
    secret: ${AWS_SECRET}
    token: ${AWS_TOKEN}
    region: ${AWS_REGION}
  ses:
    email:
      source: ${AWS_SES_SOURCE}
      recipients: ${AWS_SES_RECIPIENTS}
kafka:
  consumer:
    max-retry: 2
  raw:
    producer:
      topic: elr_raw
    topic: elr_raw
  validation:
    topic: elr_validated
  fhir-conversion:
    topic: fhir_converted
  fhir-conversion-prep:
    topic: fhir_prep
  xml-conversion:
    topic: xml_converted
  xml-conversion-prep:
    topic: xml_prep
  elr-duplicate:
    topic: elr_duplicate
  dlt-alarm-notification:
    topic: dlt_alarm_notification
  dlt-alarm-notification-email-aws:
    topic: dlt_alarm_notification_email_aws
  topics: elr_raw,elr_validated
  retry:
    suffix: _retry
  dlt:
    suffix: _dlt

security:
  protocol: SASL_SSL
sasl:
  mechanism: AWS_MSK_IAM
  jaas:
    config: software.amazon.msk.auth.iam.IAMLoginModule required;
  client:
    callback.handler.class: software.amazon.msk.auth.iam.IAMClientCallbackHandler
