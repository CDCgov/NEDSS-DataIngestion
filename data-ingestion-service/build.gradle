buildscript {
	repositories {
		mavenCentral()
		gradlePluginPortal()
		maven {
			url = "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
		classpath 'org.owasp:dependency-check-gradle:9.0.3'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'jacoco'
	id "org.sonarqube" version "4.2.1.3168"
}

apply plugin: 'org.owasp.dependencycheck'

group = 'gov.cdc.dataingestion'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_21
}
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

tasks.withType(Jar).all { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }

if ( isReleaseVersion ) {
	println "Using staging URL"
	ext.mavenCentralUploadUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
	println "Using snapshot URL"
	ext.mavenCentralUploadUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
}

configurations {
	jaxb
	compileOnly {
		extendsFrom annotationProcessor
	}
}

bootRun {
  systemProperty('spring.profiles.active', 'default,local')

    debugOptions {
        enabled = true
        server = true
        suspend = false
        port = java.util.Optional.ofNullable(findProperty('debug.port'))
                .map(Object::toString)
                .map(Integer::parseInt)
                .orElse(19040)
    }
}

repositories {
	mavenLocal()
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.11"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}
jacocoTestReport {
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	executionData = fileTree(dir: "$buildDir", includes: [
			"jacoco/*.exec",  // Standard Jacoco exec file for unit tests
			"outputs/code-coverage/**/*.exec"  // In case different directory structure
	])

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'gov/cdc/dataingestion/kafka/integration/service/KafkaProducerService$MockitoMock*',
					'**/JsonReaderTester.class',
					'**/DataSourceConfig.class',
					'**/NbsDataSourceConfig.class',
					'**/OpenAPIConfig.class',
					'**/SecurityConfig.class',
					'**/AnswerType.class',
					'**/CaseType.class',
					'**/ClinicalInformationType.class',
					'**/CodedType.class',
					'**/CommonQuestionsType.class',
					'**/DiseaseSpecificQuestionsType.class',
					'**/EpidemiologicInformationType.class',
					'**/HeaderType.class',
					'**/HierarchicalDesignationType.class',
					'**/HL7NumericType.class',
					'**/HL7OBXValueType.class',
					'**/HL7SNType.class',
					'**/HL7TMType.class',
					'**/IdentifiersType.class',
					'**/IdentifierType.class',
					'**/InvestigationInformationType.class',
					'**/LabReportCommentsType.class',
					'**/LabReportType.class',
					'**/NameType.class',
					'**/NoteType.class',
					'**/NumericType.class',
					'**/ObjectFactory.class',
					'**/ObservationsType.class',
					'**/ObservationType.class',
					'**/OrganizationParticipantType.class',
					'**/ParticipantsType.class',
					'**/PatientType.class',
					'**/PostalAddressType.class',
					'**/ProviderNameType.class',
					'**/ProviderParticipantType.class',
					'**/ReferenceRangeType.class',
					'**/ReportingInformationType.class',
					'**/SectionHeaderType.class',
					'**/SpecimenType.class',
					'**/SusceptibilityType.class',
					'**/TelephoneType.class',
					'**/TestResultType.class',
					'**/TestsType.class',
					'**/UnstructuredType.class',
					'**/ValuesType.class',
					'**/LabReportCommentsType.class',
					'**/TimeMetricsBuilder.class'
			])
		}))
	}
}
task integration(type: Test) {
	useJUnitPlatform()
}

jar {
	manifest {
		attributes(
				'Main-Class': 'gov.cdc.dataingestion.ServiceApplication'
		)
	}
	zip64 true
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

task jaxb {
	System.setProperty('javax.xml.accessExternalSchema', 'all')
	def jaxbTargetDir = file("src/main/java")
	doLast {
		jaxbTargetDir.mkdirs()
		ant.taskdef(
				name: 'xjc',
				classname: 'com.sun.tools.xjc.XJCTask',
				classpath: configurations.jaxb.asPath
		)
		ant.jaxbTargetDir = jaxbTargetDir
		ant.xjc(
				destdir: '${jaxbTargetDir}',
				package: 'gov.cdc.dataingestion.nbs.jaxb',
				schema: 'src/main/resources/xsd/PHDC.xsd'
		)
	}
}

compileJava.dependsOn jaxb

if (project != project.rootProject || project.hasProperty('remoteBuild')) {
  if (!file("${projectDir}/libs/hl7-parser-0.0.1-SNAPSHOT.jar").exists()) {
	  compileJava.mustRunAfter(":hl7-parser:copyJar")
    compileJava.dependsOn(":hl7-parser:copyJar")
  }

  if (!file("${projectDir}/libs/cda-schema.jar").exists()) {
     compileJava.mustRunAfter(":cdaschema:generateXmlBeans")
	   compileJava.dependsOn(":cdaschema:copyJar")
  }
	
}


dependencies {
  // Spring
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
  implementation 'org.springframework.boot:spring-boot-starter-logging'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  runtimeOnly 'org.springframework.boot:spring-boot-devtools'

  // Kafka
  implementation 'org.springframework.kafka:spring-kafka:3.3.1'
  implementation 'org.apache.kafka:kafka-clients:3.8.0'
  
  // Swagger / openapi documentation
  implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.1'

  // Database
  implementation 'com.microsoft.sqlserver:mssql-jdbc:12.8.1.jre11'

  // Hapi HL7 lib
  implementation 'ca.uhn.hapi:hapi-base:2.3'
  implementation 'ca.uhn.hapi:hapi-structures-v251:2.3'
  implementation 'ca.uhn.hapi:hapi-structures-v231:2.3'

  // Logging  
  implementation 'org.slf4j:slf4j-api:2.0.16'
  implementation 'io.prometheus:simpleclient:0.16.0'
  implementation 'io.prometheus:simpleclient_hotspot:0.16.0'
  implementation 'io.prometheus:simpleclient_httpserver:0.16.0'
  implementation 'io.prometheus:simpleclient_pushgateway:0.16.0'
  implementation 'io.micrometer:micrometer-registry-prometheus:1.15.0-M2'

  // Apache camel
  implementation 'org.apache.camel.springboot:camel-spring-boot-starter:4.8.0'
  implementation 'org.apache.camel:camel-ftp:4.8.0'
  implementation 'org.apache.camel:camel-aws2-s3:4.8.0'
  implementation 'org.apache.camel:camel-endpointdsl:4.8.0'
  implementation 'org.apache.camel.springboot:camel-file-starter:4.8.0'
  implementation 'org.apache.camel.springboot:camel-zipfile-starter:4.8.0'
  implementation 'org.apache.camel:camel-xml-jaxb:4.8.0'

  // Lombok annotations
  compileOnly 'org.projectlombok:lombok:1.18.34'
  annotationProcessor 'org.projectlombok:lombok:1.18.34'

  implementation 'org.liquibase:liquibase-core:4.31.1'


  // Misc
  implementation 'org.yaml:snakeyaml:2.3'
  implementation 'org.apache.commons:commons-lang3:3.17.0'
  implementation 'com.google.code.gson:gson:2.11.0'
  implementation 'com.zaxxer:HikariCP:5.1.0'
  implementation 'org.apache.xmlbeans:xmlbeans:3.1.0'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
  implementation 'com.fasterxml.jackson.core:jackson-core:2.16.0'
  implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.0'
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
  implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
  runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.2'
  runtimeOnly 'com.nimbusds:oauth2-oidc-sdk:11.8'
  jaxb 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
  jaxb 'org.glassfish.jaxb:jaxb-xjc:4.0.2'


  // Testing
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testImplementation 'org.springframework.kafka:spring-kafka-test:3.2.4'
  testImplementation 'org.testcontainers:testcontainers:1.20.1'
  testImplementation 'org.testcontainers:kafka:1.20.1'
  testImplementation 'org.testcontainers:mssqlserver:1.20.1'
  testImplementation 'org.testcontainers:junit-jupiter:1.20.1'
  testImplementation 'org.apache.camel:camel-test-spring-junit5:4.0.0'
  testImplementation(platform('org.junit:junit-bom:5.9.1'))

  // Inter-project dependencies
  // NOTE: dont remove this, might come back to this setup in the future  
  if (findProject(':hl7-parser')) {
    implementation project(':hl7-parser')
  } else {
    implementation files('libs/hl7-parser-0.0.1-SNAPSHOT.jar')
  }
  implementation files('libs/cda-schema.jar')
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jar {
	manifest {
		attributes(
				'Main-Class': 'gov.cdc.dataingestion.ServiceApplication'
		)
	}
	zip64 true
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	// Gather all runtime dependencies
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }


	// Conditionally add dependencies from projects
  if (findProject(':hl7-parser') && !file("${projectDir}/libs/hl7-parser-0.0.1-SNAPSHOT.jar").exists()) {
    dependsOn(':hl7-parser:copyJar')
  }

  if (findProject(':cdaschema') && !file("${projectDir}/libs/cda-schema.jar").exists()) {
    dependsOn(':cdaschema:copyJar')
  }
}


sonarqube {
	properties {
		property "sonar.projectKey", "CDCgov_NEDSS-DataIngestion"
		property "sonar.organization", "cdcgov"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.exclusions", "**/JsonReaderTester.java, **/DataSourceConfig.java, **/NbsDataSourceConfig.java, " +
				"**/OdseDataSourceConfig.java, **/OpenAPIConfig.java, **/SecurityConfig.java," +
				" **/CustomAuthenticationManagerResolver.java, **/AnswerType.java, **/CaseType.java," +
				" **/ClinicalInformationType.java, **/CodedType.java, **/CommonQuestionsType.java," +
				" **/DiseaseSpecificQuestionsType.java, **/EpidemiologicInformationType.java, **/HeaderType.java," +
				" **/HierarchicalDesignationType.java, **/HL7NumericType.java, **/HL7OBXValueType.java, **/HL7SNType.java," +
				" **/HL7TMType.java, **/IdentifiersType.java, **/IdentifierType.java, **/InvestigationInformationType.java, **/LabReportCommentsType.java, **/LabReportType.java, **/NameType.java, **/NoteType.java, **/NumericType.java, **/ObjectFactory.java, **/ObservationsType.java, **/ObservationType.java, **/OrganizationParticipantType.java, **/ParticipantsType.java, **/PatientType.java, **/PostalAddressType.java, **/ProviderNameType.java, **/ProviderParticipantType.java, **/ReferenceRangeType.java, **/ReportingInformationType.java, **/SectionHeaderType.java, **/SpecimenType.java, **/SusceptibilityType.java, **/TelephoneType.java, **/TestResultType.java, **/TestsType.java, **/UnstructuredType.java," +
				" **/ValuesType.java, " +
				" **/exception/**, ServiceApplication.java," +
				" **rawmessage/dto/**, **/deadletter/model/**, " +
				" **/nbs/ecr/**, "  + // <-- Remove this once ECR is completed
				" **/report/repository/model/**, **/config/**, **/model/**, **/jaxb/**, **/TimeMetricsBuilder.java"
	}
}