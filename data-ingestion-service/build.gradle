import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
	repositories {
		mavenCentral()
		gradlePluginPortal()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
		classpath "org.liquibase:liquibase-gradle-plugin:2.2.0"
		classpath 'org.owasp:dependency-check-gradle:9.0.3'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'jacoco'
	id "org.sonarqube" version "4.2.1.3168"
	id 'org.liquibase.gradle' version '2.2.0'
//	id 'checkstyle'
}

apply plugin: 'org.owasp.dependencycheck'

group = 'gov.cdc.dataingestion'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_17
}
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

tasks.withType(Jar).all { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }

if ( isReleaseVersion ) {
	println "Using staging URL"
	ext.mavenCentralUploadUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
	println "Using snapshot URL"
	ext.mavenCentralUploadUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
}

configurations {
	jaxb
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.8"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/JsonReaderTester.class',
					'**/DataSourceConfig.class',
					'**/NbsDataSourceConfig.class',
					'**/OpenAPIConfig.class',
					'**/SecurityConfig.class',
					'**/AnswerType.class',
					'**/CaseType.class',
					'**/ClinicalInformationType.class',
					'**/CodedType.class',
					'**/CommonQuestionsType.class',
					'**/DiseaseSpecificQuestionsType.class',
					'**/EpidemiologicInformationType.class',
					'**/HeaderType.class',
					'**/HierarchicalDesignationType.class',
					'**/HL7NumericType.class',
					'**/HL7OBXValueType.class',
					'**/HL7SNType.class',
					'**/HL7TMType.class',
					'**/IdentifiersType.class',
					'**/IdentifierType.class',
					'**/InvestigationInformationType.class',
					'**/LabReportCommentsType.class',
					'**/LabReportType.class',
					'**/NameType.class',
					'**/NoteType.class',
					'**/NumericType.class',
					'**/ObjectFactory.class',
					'**/ObservationsType.class',
					'**/ObservationType.class',
					'**/OrganizationParticipantType.class',
					'**/ParticipantsType.class',
					'**/PatientType.class',
					'**/PostalAddressType.class',
					'**/ProviderNameType.class',
					'**/ProviderParticipantType.class',
					'**/ReferenceRangeType.class',
					'**/ReportingInformationType.class',
					'**/SectionHeaderType.class',
					'**/SpecimenType.class',
					'**/SusceptibilityType.class',
					'**/TelephoneType.class',
					'**/TestResultType.class',
					'**/TestsType.class',
					'**/UnstructuredType.class',
					'**/ValuesType.class',
					'**/LabReportCommentsType.class'
			])
		}))
	}
}
task integration(type: Test) {
	useJUnitPlatform()
}

jar {
	manifest {
		attributes(
				'Main-Class': 'gov.cdc.dataingestion.ServiceApplication'
		)
	}
	zip64 true
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

task jaxb {
	System.setProperty('javax.xml.accessExternalSchema', 'all')
	def jaxbTargetDir = file("src/main/java")
	doLast {
		jaxbTargetDir.mkdirs()
		ant.taskdef(
				name: 'xjc',
				classname: 'com.sun.tools.xjc.XJCTask',
				classpath: configurations.jaxb.asPath
		)
		ant.jaxbTargetDir = jaxbTargetDir
		ant.xjc(
				destdir: '${jaxbTargetDir}',
				package: 'gov.cdc.dataingestion.nbs.jaxb',
				schema: 'src/main/resources/xsd/PHDC.xsd'
		)
	}
}

compileJava.dependsOn jaxb

if (project != project.rootProject || project.hasProperty('remoteBuild')) {
	task copyJar(type: Copy) {
		from "${project(':cdaschema').buildDir}/libs/cda-schema.jar"
		into 'libs'
	}
	copyJar.dependsOn(':cdaschema:cdaSchemaJar')
	compileJava.dependsOn copyJar

	compileJava.mustRunAfter(":hl7-parser:build")
	compileJava.mustRunAfter(":cdaschema:build")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web:3.2.0'

	implementation 'commons-lang:commons-lang:2.6'

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server:3.2.0'
	implementation 'org.springframework.kafka:spring-kafka:3.0.12'
	implementation 'org.apache.kafka:kafka-clients:3.6.0'
	implementation 'ca.uhn.hapi.fhir:hapi-fhir-structures-r4:6.10.0'
	implementation 'io.github.linuxforhealth:hl7v2-fhir-converter:1.0.19'
	implementation 'com.google.code.gson:gson:2.10.1'
	implementation 'com.opencsv:opencsv:5.7.1'
	implementation 'com.microsoft.sqlserver:mssql-jdbc:12.2.0.jre11'
	implementation 'com.zaxxer:HikariCP:5.0.1'

	implementation 'ca.uhn.hapi:hapi-base:2.3'
	implementation 'ca.uhn.hapi:hapi-structures-v251:2.3'
	implementation 'ca.uhn.hapi:hapi-structures-v231:2.3'
	implementation 'org.springframework.boot:spring-boot-starter-logging'
	implementation 'org.slf4j:slf4j-api'
	implementation 'ch.qos.logback:logback-classic'
	implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'software.amazon.msk:aws-msk-iam-auth:2.0.1'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.springframework.boot:spring-boot-starter-actuator:3.2.0'
	implementation 'org.apache.xmlbeans:xmlbeans:3.1.0'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.16.0'

	implementation 'io.prometheus:simpleclient:0.16.0'
	implementation 'io.prometheus:simpleclient_hotspot:0.16.0'
	implementation 'io.prometheus:simpleclient_httpserver:0.16.0'
	implementation 'io.prometheus:simpleclient_pushgateway:0.16.0'

	// DI HL7 Wrapper
	if (findProject(':hl7-parser')) {
		implementation project(':hl7-parser')
	} else {
		// this mostly needed when testing the app on idea
		implementation files('libs/hl7-parser-0.0.1-SNAPSHOT.jar')
	}

	implementation files('libs/cda-schema.jar')

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation(platform('org.junit:junit-bom:5.9.1'))
	testImplementation('org.junit.jupiter:junit-jupiter')
	testImplementation 'org.springframework.kafka:spring-kafka-test:3.1.0'

	testImplementation(platform('org.junit:junit-bom:5.9.1'))
	testImplementation('org.junit.jupiter:junit-jupiter:5.9.2')

	testImplementation 'org.testcontainers:testcontainers:1.17.3'
	testImplementation "org.testcontainers:kafka:1.17.3"
	testImplementation "org.testcontainers:mssqlserver:1.17.3"
	testImplementation "org.testcontainers:junit-jupiter:1.17.3"
	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.0'
	testImplementation 'org.springframework.security:spring-security-test:6.2.0'

	runtimeOnly 'org.springframework.boot:spring-boot-devtools:3.2.0'

	// Below is needed to compile jaxb generated code
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'

	// Below is needed for runtime with jaxb generated code
	runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.2'

	// Only need below two dependencies for java code generation from xsd file(s)
	jaxb 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
	jaxb 'org.glassfish.jaxb:jaxb-xjc:4.0.2'

	// Liquibase
	liquibaseRuntime 'org.liquibase:liquibase-core:4.24.0'
	liquibaseRuntime group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
	liquibaseRuntime 'com.microsoft.sqlserver:mssql-jdbc:12.2.0.jre11'
}

test {
	useJUnitPlatform()
}

jar {
	manifest {
		attributes(
				'Main-Class': 'gov.cdc.dataingestion.ServiceApplication'
		)
	}
	zip64 true
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	// Gather all runtime dependencies
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }


	// Conditionally add dependencies from projects
	if (findProject(':hl7-parser')) {
		dependsOn(':hl7-parser:jar')
	}

	if (findProject(':cdaschema')) {
		dependsOn(':cdaschema:jar')
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "CDCgov_NEDSS-DataIngestion"
		property "sonar.organization", "cdcgov"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.exclusions", "**/JsonReaderTester.java, **/DataSourceConfig.java, **/NbsDataSourceConfig.java, **/OpenAPIConfig.java, **/SecurityConfig.java, **/AnswerType.java, **/CaseType.java, **/ClinicalInformationType.java, **/CodedType.java, **/CommonQuestionsType.java, **/DiseaseSpecificQuestionsType.java, **/EpidemiologicInformationType.java, **/HeaderType.java, **/HierarchicalDesignationType.java, **/HL7NumericType.java, **/HL7OBXValueType.java, **/HL7SNType.java, **/HL7TMType.java, **/IdentifiersType.java, **/IdentifierType.java, **/InvestigationInformationType.java, **/LabReportCommentsType.java, **/LabReportType.java, **/NameType.java, **/NoteType.java, **/NumericType.java, **/ObjectFactory.java, **/ObservationsType.java, **/ObservationType.java, **/OrganizationParticipantType.java, **/ParticipantsType.java, **/PatientType.java, **/PostalAddressType.java, **/ProviderNameType.java, **/ProviderParticipantType.java, **/ReferenceRangeType.java, **/ReportingInformationType.java, **/SectionHeaderType.java, **/SpecimenType.java, **/SusceptibilityType.java, **/TelephoneType.java, **/TestResultType.java, **/TestsType.java, **/UnstructuredType.java, **/ValuesType.java"

	}
}

apply plugin: "org.liquibase.gradle"

liquibase {
	activities {
		main {
			changelogFile './src/main/resources/db/changelog.xml'
			url "jdbc:sqlserver://${System.env.DI_DBSERVER};databaseName=${System.env.DI_DBNAME};encrypt=true;trustServerCertificate=true"
			username  "${System.env.DI_USERNAME}"
			password "${System.env.DI_PASSWORD}"
		}
	}
}